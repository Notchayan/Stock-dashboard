{"version":3,"sources":["apis/stock.js","components/SearchCard.js","components/FilterCard.js","components/TableDataCard.js","components/GraphCard.js","components/App.js","index.js"],"names":["axios","create","baseURL","SearchCard","state","search_stockArray","loading_api","inputValue","disableSearchButton","document","querySelector","disabled","length","loadSavedStocks","localStorage","getItem","lsArray","JSON","parse","window","confirm","forEach","stockCode","sendSearchResult","removeItem","torf","value","a","stockValue","toUpperCase","startDate","Math","round","Date","getTime","endDate","includes","alert","setState","Promise","all","stock","get","params","symbol","token","resolution","from","to","table_response","graph_response","data","c","h","l","o","pc","t","props","sendSearchGraphResult","response","prevState","console","error","handleInputChange","e","target","this","className","type","placeholder","onChange","onClick","Component","FilterCard","validator_start_date","validator_end_date","start_dateValidator","val","current_date","end_dateValidator","filterMyChart","getFilteredData","showFilterDOM","optionSelectDOM","showGraphData","map","graphData","index","key","selected","TableDataCard","currency","tableDataDOM","tableData","table","scope","toLocaleDateString","toFixed","showTableData","React","GraphCard","chartRef","createRef","chartInstance","handleMouseEnter","dataset","datasets","borderColor","borderWidth","update","duration","easing","handleMouseLeave","convertToDate","str","date","mnth","String","getMonth","padStart","day","getDate","getFullYear","createChart","prevProps","updateChart","lowOrHighColor","y_axis","chartOptions","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","scales","x","display","grid","color","y","stepSize","elements","point","radius","legend","ctx","current","getContext","Chart","labels","x_axis","backgroundColor","options","addEventListener","id","date_data","filteredStartDate","filteredEndDate","ref","App","activeStockValue","showFilterData","option","concat","response_data","abc","converted_array","i","obj","indexOf","push","splice","codeExist","graph_array","setItem","stringify","s","location","reload","checkStockCode","chartElement","style","graphCardDOM","displayStyle","showActiveStockCode","filteredData","href","ReactDOM","render"],"mappings":"qXAEeA,E,OAAAA,EAAMC,OAAO,CAAEC,QAAS,+B,qBCmIxBC,E,4MA9HbC,MAAQ,CACNC,kBAAmB,GACnBC,aAAa,EACbC,WAAY,I,EAYdC,oBAAsB,WAAO,IACnBD,EAAe,EAAKH,MAApBG,WACOE,SAASC,cAAc,eAC/BC,UAAYJ,GAAcA,EAAWK,OAAS,G,EAGvDC,gBAAkB,WAChB,GAAIC,aAAaC,QAAQ,qBAAsB,CAC7C,IAAMC,EAAUC,KAAKC,MAAMJ,aAAaC,QAAQ,sBAC7BI,OAAOC,QAAQ,uDAEhCJ,EAAQK,SAAQ,SAACC,GAAD,OAAe,EAAKC,kBAAiB,EAAOD,MAE5DR,aAAaU,WAAW,uB,EAK9BD,iB,uCAAmB,WAAOE,EAAMC,GAAb,2BAAAC,EAAA,yDACXC,EAAaH,EACfhB,SAASC,cAAc,sBAAsBgB,MAAMG,cACnDH,EAEEI,EAAYC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC9CC,EAAUL,EAAY,QAExB,EAAK1B,MAAMC,kBAAkB+B,SAASR,GARzB,uBASfS,MAAM,kBACN5B,SAASC,cAAc,sBAAsBgB,MAAQ,GAVtC,0CAef,EAAKY,SAAS,CAAEhC,aAAa,IAfd,UAiBgCiC,QAAQC,IAAI,CACzDC,EAAMC,IAAI,SAAU,CAClBC,OAAQ,CACNC,OAAQhB,EACRiB,MAAO,0BAGXJ,EAAMC,IAAI,gBAAiB,CACzBC,OAAQ,CACNC,OAAQhB,EACRkB,WAAY,EACZC,KAAMZ,EACNa,GAAIlB,EACJe,MAAO,4BA9BE,oCAiBRI,EAjBQ,KAiBQC,EAjBR,KAoCa,IAA1BD,EAAeE,KAAKC,GACM,IAA1BH,EAAeE,KAAKE,GACM,IAA1BJ,EAAeE,KAAKG,GACM,IAA1BL,EAAeE,KAAKI,GACO,IAA3BN,EAAeE,KAAKK,IACM,IAA1BP,EAAeE,KAAKM,EAEpB,EAAKC,MAAMC,sBAAsB,UAAW,KAE5C,EAAKD,MAAMC,uBAAsB,EAAM,CACrC/B,aACAgC,SAAUV,EAAeC,OAE3B,EAAKO,MAAMnC,iBAAiB0B,EAAeE,OAG7C,EAAKb,UAAS,SAACuB,GAAD,MAAgB,CAC5BxD,kBAAkB,GAAD,mBAAMwD,EAAUxD,mBAAhB,CAAmCuB,IACpDtB,aAAa,EACbC,WAAY,OAvDC,kDA0DfuD,QAAQC,MAAM,aAAd,MACA,EAAKzB,SAAS,CAAEhC,aAAa,IA3Dd,0D,0DA+DnB0D,kBAAoB,SAACC,GACnB,EAAK3B,SAAS,CAAE/B,WAAY0D,EAAEC,OAAOxC,OAAS,EAAKlB,sB,kEA1FnD2D,KAAK3D,sBACL2D,KAAKtD,oB,2CAILsD,KAAK3D,wB,+BAwFG,IAAD,SAC6B2D,KAAK/D,MAAjCG,EADD,EACCA,WAAYD,EADb,EACaA,YACpB,OACE,yBAAK8D,UAAU,8BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WAAd,sBACA,2BACEC,KAAK,OACLD,UAAU,iCACVE,YAAY,yBACZ5C,MAAOnB,EACPgE,SAAUJ,KAAKH,oBAEjB,4BACEI,UAAU,qCACVI,QAAS,kBAAM,EAAKjD,kBAAiB,EAAM,KAC3CZ,SAAUL,GAHZ,iBAKgB,kBAAC,IAAD,a,GAvHDmE,aC8GVC,G,kNA7GbtE,MAAQ,CACNuE,qBAAsB,GACtBC,mBAAoB,I,EAStBC,oBAAsB,SAACC,GACrB,IAAIC,EAAe,IAAI9C,KAEvB,EAAKK,SAAS,CACZqC,qBAAsBG,IACrB,WAEC7C,KAAKf,MAAM,EAAKd,MAAMuE,sBAAwB1C,KAAKf,MAAM,EAAKd,MAAMwE,qBACpE3C,KAAKf,MAAM,EAAKd,MAAMuE,sBAAwBI,GAC9C9C,KAAKf,MAAM,EAAKd,MAAMwE,oBAAsBG,EAE5CtE,SAASC,cAAc,eAAeC,UAAW,EAEjDF,SAASC,cAAc,eAAeC,UAAW,M,EAKvDqE,kBAAoB,SAACF,GACnB,IAAIC,EAAe,IAAI9C,KAEvB,EAAKK,SAAS,CACZsC,mBAAoBE,IACnB,WAEC7C,KAAKf,MAAM,EAAKd,MAAMuE,sBAAwB1C,KAAKf,MAAM,EAAKd,MAAMwE,qBACpE3C,KAAKf,MAAM,EAAKd,MAAMwE,oBAAsBG,EAE5CtE,SAASC,cAAc,eAAeC,UAAW,EAEjDF,SAASC,cAAc,eAAeC,UAAW,M,EAKvDsE,c,sBAAgB,kCAAAtD,EAAA,6DACVC,EAAanB,SAASC,cAAc,kBAAkBgB,MACtDI,EAAY,IAAIG,KAAKxB,SAASC,cAAc,oBAAoBgB,OAAS,IACzES,EAAU,IAAIF,KAAKxB,SAASC,cAAc,kBAAkBgB,OAAS,IAH3D,SAKee,EAAMC,IAAI,gBAAiB,CACtDC,OAAQ,CACNC,OAAQhB,EACRkB,WAAY,EACZC,KAAMjB,EACNkB,GAAIb,EACJU,MAAO,0BAXG,OAKRK,EALQ,OAed,EAAKQ,MAAMwB,gBAAgB,CAACpD,EAAWK,GAAU,CAAEP,WAAYA,EAAYgC,SAAUV,EAAeC,OACpG1C,SAASC,cAAc,oBAAoBgB,MAAQ,GACnDjB,SAASC,cAAc,kBAAkBgB,MAAQ,GAjBnC,2C,mEAxCVyC,KAAKT,MAAMyB,gBACb1E,SAASC,cAAc,eAAeC,UAAW,K,+BA2D3C,IACJyE,EADG,OAaP,OAVAA,EAAkBjB,KAAKT,MAAM2B,cAAcC,KAAI,SAACC,EAAWC,GAAZ,OAC7C,4BACE9D,MAAO6D,EAAU3D,WACjB6D,IAAKD,EACLE,SAAU,EAAKhC,MAAM2B,cAAc,EAAK3B,MAAM2B,cAAczE,OAAS,KAAO2E,EAAY,WAAa,IAEpGA,EAAU3D,eAKb,yBAAKwC,UAAU,8BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WAAd,yBACCD,KAAKT,MAAMyB,cACV,6BACE,4BAAQf,UAAU,+BAA+BgB,GACjD,yBAAKhB,UAAU,gCACb,yBAAKA,UAAU,wBACb,2BAAOA,UAAU,QAAjB,eACA,2BAAOA,UAAU,0BAA0BC,KAAK,OAAOE,SAAU,SAACN,GAAD,OAAO,EAAKY,oBAAoBZ,EAAEC,OAAOxC,WAE5G,yBAAK0C,UAAU,wBACb,2BAAOA,UAAU,QAAjB,aACA,2BAAOA,UAAU,wBAAwBC,KAAK,OAAOE,SAAU,SAACN,GAAD,OAAO,EAAKe,kBAAkBf,EAAEC,OAAOxC,YAG1G,4BAAQ0C,UAAU,0CAA0CI,QAASL,KAAKc,eAA1E,UACS,kBAAC,IAAD,QAIX,uBAAGb,UAAU,0BAAb,4E,GAtGaK,cCgIVkB,G,kNAjIbvF,MAAQ,CACNwF,SAAU,K,uDAGF,IACJC,EADG,OA4FP,OAxFAA,EAAe1B,KAAKT,MAAMoC,UAAUR,KAAI,SAACS,EAAOP,GAE9C,MAAc,yBAAVO,EAEA,wBAAIN,IAAKD,GACP,wBAAIQ,MAAM,OAAO,EAAKtC,MAAM6B,UAAUC,GAAO5D,YAC7C,4BAAK,IAAIK,KAAe,IAAV8D,EAAMtC,GAAUwC,sBAG9B,wBACE7B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAMxC,EAAE2C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBAOR,EAAK9F,MAAMwF,SAAWG,EAAMxC,EAAE2C,QAAQ,IAIzC,wBACE9B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAMzC,EAAE4C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBAOR,EAAK9F,MAAMwF,SAAWG,EAAMzC,EAAE4C,QAAQ,IAIzC,wBACE9B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAM1C,EAAE6C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBAOR,EAAK9F,MAAMwF,SAAWG,EAAM1C,EAAE6C,QAAQ,IAIzC,wBACE9B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAM3C,EAAE8C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBAOR,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,IAI1C,wBACE9B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAM3C,EAAE8C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBAOR,EAAK9F,MAAMwF,SAAWG,EAAM3C,EAAE8C,QAAQ,IAIzC,wBACE9B,UAAS,UACP,EAAKhE,MAAMwF,SAAWG,EAAM3C,EAAE8C,QAAQ,GACtC,EAAK9F,MAAMwF,SAAWG,EAAMvC,GAAG0C,QAAQ,GACnC,aACA,WAJG,sBADX,WASI,IACCH,EAAMvC,GAAG0C,QAAQ,GAAKH,EAAM3C,EAAE8C,QAAQ,GAAM,KAC7CA,QAAQ,GAXZ,OAgBC,QAIP,yBAAK9B,UAAU,kCACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WAAd,0BACCD,KAAKT,MAAMyC,cACV,yBAAK/B,UAAU,oBACb,2BAAOA,UAAU,uBACf,+BACE,4BACE,wBAAI4B,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,qBACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,wBACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,sBAGJ,+BAAQH,KAIZ,uBAAGzB,UAAU,wBAAb,gG,GAxHgBgC,IAAM3B,Y,yBCkJnB4B,G,kNAjJbC,SAAWF,IAAMG,Y,EACjBC,cAAgB,K,EAoFhBC,iBAAmB,WAEjB,GAAI,EAAKD,cAAe,CACtB,IAAME,EAAU,EAAKF,cAAcrD,KAAKwD,SAAS,GAEjDD,EAAQE,YAAc,wBAEtBF,EAAQG,YAAc,EAEtB,EAAKL,cAAcM,OAAO,CAAEC,SAAU,IAAKC,OAAQ,a,EAIvDC,iBAAmB,WAEjB,GAAI,EAAKT,cAAe,CACtB,IAAME,EAAU,EAAKF,cAAcrD,KAAKwD,SAAS,GAEjDD,EAAQE,YAAc,wBAEtBF,EAAQG,YAAc,EAEtB,EAAKL,cAAcM,OAAO,CAAEC,SAAU,IAAKC,OAAQ,a,EAIvDE,cAAgB,SAACC,GACf,IAAMC,EAAO,IAAInF,KAAKkF,GAChBE,EAAOC,OAAOF,EAAKG,WAAa,GAAGC,SAAS,EAAG,KAC/CC,EAAMH,OAAOF,EAAKM,WAAWF,SAAS,EAAG,KAC/C,MAAM,GAAN,OAAUJ,EAAKO,cAAf,YAAgCN,EAAhC,YAAwCI,I,kEA/GxCtD,KAAKyD,gB,yCAGYC,GACb1D,KAAKT,MAAM2B,eAAiBwC,EAAUtC,YAAcpB,KAAKT,MAAM6B,WACjEpB,KAAK2D,gB,oCAIM,IACLvC,EAAcpB,KAAKT,MAAnB6B,UACFwC,EAAiBxC,EAAUyC,OAAO,GAAKzC,EAAUyC,OAAOzC,EAAUyC,OAAOpH,OAAS,GAAK,UAAY,UAEnGqH,EAAY,aAChBC,YAAY,EACZC,qBAAqB,EACrBC,QAAS,CACPC,QAAS,CACPC,SAAS,EACTC,KAAM,UAGVC,OAAQ,CACNC,EAAG,CACDC,SAAS,EACTC,KAAM,CACJD,SAAS,EACTE,MAAO,uBAGXC,EAAG,CACDH,SAAS,EACTI,SAAU,EACVH,KAAM,CACJD,SAAS,EACTE,MAAO,wBAIbG,SAAU,CACRC,MAAO,CACLC,OAAQ,KA5BI,UA+BP,CACPC,OAAQ,CACNR,SAAS,KAKTS,EAAMhF,KAAKmC,SAAS8C,QAAQC,WAAW,MAC7ClF,KAAKqC,cAAgB,IAAI8C,IAAMH,EAAK,CAClC9E,KAAM,OACNlB,KAAM,CACJoG,OAAQhE,EAAUiE,OAClB7C,SAAU,CACR,CACExD,KAAMoC,EAAUyC,OAChByB,gBAAiB,mBACjB7C,YAAamB,EACblB,YAAa,KAInB6C,QAASzB,IAIX9D,KAAKmC,SAAS8C,QAAQO,iBAAiB,aAAcxF,KAAKsC,kBAC1DtC,KAAKmC,SAAS8C,QAAQO,iBAAiB,aAAcxF,KAAK8C,oB,oCAG7C,IACL1B,EAAcpB,KAAKT,MAAnB6B,UAERpB,KAAKqC,cAAcrD,KAAKoG,OAAShE,EAAUiE,OAC3CrF,KAAKqC,cAAcrD,KAAKwD,SAAS,GAAGxD,KAAOoC,EAAUyC,OACrD7D,KAAKqC,cAAcM,W,+BAoCX,IACAvB,EAAcpB,KAAKT,MAAnB6B,UACR,OACE,yBAAKnB,UAAU,cAAcwF,GAAE,kBAAarE,EAAU3D,aACpD,6BACE,wBAAIwC,UAAU,sBACXmB,EAAU3D,WACV2D,EAAUsE,UACT,yBAAKzF,UAAU,iBACb,kCAEGD,KAAK+C,cAAc3B,EAAUsE,UAAUC,mBAF1C,aAGG3F,KAAK+C,cAAc3B,EAAUsE,UAAUE,iBAH1C,MAQF,yBAAK3F,UAAU,iBAAf,oBAGJ,4BAAQA,UAAU,UAAU4F,IAAK7F,KAAKmC,iB,GA3IxB7B,cCkQTwF,E,4MA5Pb7J,MAAQ,CACN0F,UAAW,GACXP,UAAW,GACX2E,iBAAkB,GAClB/E,eAAe,EACfgF,gBAAgB,EAChBhE,eAAe,EACfd,eAAe,EACfrE,QAAS,GACToJ,OAAQ,I,EAeV7I,iBAAmB,SAAC4B,GACL,yBAATA,GACF,EAAKb,SAAS,CACZwD,UAAW,EAAK1F,MAAM0F,UAAUuE,OAAOlH,GACvCgC,eAAe,EACfgB,eAAe,K,EAKrBjB,gBAAkB,SAACkC,EAAMkD,GAIvB,IAHA,IAAIC,EAAM,EAAKnK,MAAMmF,UACjBiF,EAAkB,GAEbC,EAAI,EAAGA,EAAIF,EAAI3J,OAAQ6J,IAAK,CACnC,IAAIC,EAAMH,EAAIE,GAEd,IAA0D,IAAtDH,EAAc1I,WAAW+I,QAAQD,EAAI9I,YAAoB,CAC3D4I,EAAkB,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAc1G,SAASH,EAAE7C,OAAQ6J,IACnDD,EAAgBI,KAAK,IAAI3I,KAAmC,IAA9BqI,EAAc1G,SAASH,EAAEgH,KAEzDF,EAAIM,OAAOJ,EAAG,GACdF,EAAIK,KAAK,CACPhJ,WAAY0I,EAAc1I,WAC1B4H,OAAQgB,EACRxC,OAAQsC,EAAc1G,SAASR,EAC/ByG,UAAW,CACTC,kBAAmB,IAAI7H,KAAe,IAAVmF,EAAK,IACjC2C,gBAAiB,IAAI9H,KAAe,IAAVmF,EAAK,OAGnC,EAAK9E,SACH,CACEiD,UAAWgF,EACXL,iBAAkBI,EAAc1I,WAChCyD,eAAe,IAEjB,WACE,EAAK/C,SAAS,CACZ+C,eAAe,U,EAQ3B1B,sBAAwB,SAACmH,EAAWC,GAClC,GAAkB,YAAdD,EAAyB,CAC3B,IAAIN,EAAkB,GAWtB,GATA,EAAKlI,SACH,CACEtB,QAAS,EAAKZ,MAAMY,QAAQqJ,OAAOU,EAAYnJ,cAEjD,WACEd,aAAakK,QAAQ,oBAAqB/J,KAAKgK,UAAU,EAAK7K,MAAMY,aAIzC,YAA3B+J,EAAYnH,SAASsH,EAAiB,CACxC,IAAK,IAAIT,EAAI,EAAGA,EAAIM,EAAYnH,SAASH,EAAE7C,OAAQ6J,IACjDD,EAAgBI,KAAK,IAAI3I,KAAiC,IAA5B8I,EAAYnH,SAASH,EAAEgH,KAEvD,EAAKnI,SACH,CACEiD,UAAW,EAAKnF,MAAMmF,UAAU8E,OAAO,CACrCzI,WAAYmJ,EAAYnJ,WACxB4H,OAAQgB,EACRxC,OAAQ+C,EAAYnH,SAASR,IAE/B8G,iBAAkBa,EAAYnJ,WAC9ByD,eAAe,IAEjB,WACE,EAAK/C,SAAS,CACZ+C,eAAe,YAKrB,EAAK/C,SACH,CACEiD,UAAW,EAAKnF,MAAMmF,UAAU8E,OAAO,CACrCzI,WAAYmJ,EAAYnJ,WACxBgC,SAAU,UACVyB,eAAe,MAGnB,WACE,EAAK/C,SAAS,CACZ+C,eAAe,YAMvBhD,MAAM,kDACNlB,OAAOgK,SAASC,QAAO,I,EAI3BC,eAAiB,SAACzJ,GAChB,EAAKxB,MAAMmF,UAAUD,KAAI,SAACC,EAAWC,GACnC,IAAM8F,EAAe7K,SAASC,cAAc,YAAc6E,EAAU3D,YAChE0J,IACFA,EAAaC,MAAM7C,QAAU,QAE3BlD,IAAU,EAAKpF,MAAMmF,UAAU3E,OAAS,IAC1C0K,EAAaC,MAAM7C,QAAU,YAIjC,EAAKpG,SAAS,CACZ4H,iBAAkBtI,K,mEA/HA,IAAD,OACnBuC,KAAK/D,MAAMmF,UAAUD,KAAI,SAACC,EAAWC,GACnC,IAAM8F,EAAe7K,SAASC,cAAc,YAAc6E,EAAU3D,YAChE0J,IACFA,EAAaC,MAAM7C,QAAU,QAE3BlD,IAAU,EAAKpF,MAAMmF,UAAU3E,OAAS,IAC1C0K,EAAaC,MAAM7C,QAAU,c,+BA4HzB,IAEJtD,EAFG,OACHoG,EAAe,GAyCnB,OAtCIrH,KAAK/D,MAAMiF,gBACbmG,EAAerH,KAAK/D,MAAMmF,UAAUD,KAAI,SAACC,EAAWC,GAClD,GAA2B,YAAvBD,EAAU3B,SAAwB,CACpC,IAAM6H,EAAelG,EAAU3D,aAAe,EAAKxB,MAAM8J,iBAAmB,QAAU,OACtF,OACE,kBAAC,EAAD,CACEzE,IAAKD,EACLM,UAAW,EAAK1F,MAAM0F,UACtBT,cAAe,EAAKjF,MAAMiF,cAC1BqG,oBAAqB,EAAKtL,MAAM8J,iBAChC3E,UAAWA,EACXoG,aAAc,EAAKvL,MAAMuL,aACzBxB,eAAgB,EAAK/J,MAAM+J,eAC3BsB,aAAcA,IAIlB,OACE,uBAAGhG,IAAKD,EAAOpB,UAAU,yBAAzB,4HAQRgB,EAAkBjB,KAAK/D,MAAMmF,UAAUD,KAAI,SAACC,EAAWC,GACrD,OACE,4BACE9D,MAAO6D,EAAU3D,WACjB6D,IAAKD,EACLE,SAAU,EAAKtF,MAAMmF,UAAU,EAAKnF,MAAMmF,UAAU3E,OAAS,KAAO2E,EAAY,WAAa,IAE5FA,EAAU3D,eAMf,yBAAKwC,UAAU,iCAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,kBAAkBwH,KAAK,KAApC,cAIF,wBAAIxH,UAAU,YACZ,uBAAGA,UAAU,WAAWwH,KAAK,KAA7B,aAIF,wBAAIxH,UAAU,YACZ,uBAAGA,UAAU,WAAWwH,KAAK,KAA7B,aAIF,wBAAIxH,UAAU,YACZ,uBAAGA,UAAU,WAAWwH,KAAK,KAA7B,aAMN,yBAAKxH,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAY7C,iBAAkB4C,KAAK5C,iBAAkBoC,sBAAuBQ,KAAKR,wBACjF,kBAAC,EAAD,CAAYwB,cAAehB,KAAK/D,MAAM+E,cAAeE,cAAelB,KAAK/D,MAAMmF,UAAWmG,oBAAqBvH,KAAK/D,MAAM8J,iBAAkBhF,gBAAiBf,KAAKe,mBAEpK,yBAAKd,UAAU,wBACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACZD,KAAK/D,MAAMiF,cACV,6BACE,4BAAQjB,UAAU,mCAAmCG,SAAU,SAACN,GAAD,OAAO,EAAKoH,eAAepH,EAAEC,OAAOxC,SAChG0D,GAEFoG,GAGH,uBAAGpH,UAAU,yBAAb,mFASZ,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAe+B,cAAehC,KAAK/D,MAAM+F,cAAeL,UAAW3B,KAAK/D,MAAM0F,UAAWP,UAAWpB,KAAK/D,MAAMmF,qB,GAnP7Ga,IAAM3B,WCLxBoH,IAASC,OACL,kBAAC,EAAD,MACArL,SAASC,cAAc,W","file":"static/js/main.87d6ca1b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({ baseURL: 'https://finnhub.io/api/v1/' });","import React, { Component } from 'react';\nimport stock from '../apis/stock';\nimport '../css/SearchCard.css';\nimport '../css/styles.css';\nimport { FaSearch } from 'react-icons/fa';\n\nclass SearchCard extends Component {\n  state = {\n    search_stockArray: [],\n    loading_api: false,\n    inputValue: '',\n  };\n\n  componentDidMount() {\n    this.disableSearchButton();\n    this.loadSavedStocks();\n  }\n\n  componentDidUpdate() {\n    this.disableSearchButton();\n  }\n\n  disableSearchButton = () => {\n    const { inputValue } = this.state;\n    const btnDOM = document.querySelector('.btn-search');\n    btnDOM.disabled = !inputValue || inputValue.length > 4;\n  };\n\n  loadSavedStocks = () => {\n    if (localStorage.getItem('historyStockArray')) {\n      const lsArray = JSON.parse(localStorage.getItem('historyStockArray'));\n      const loadStocks = window.confirm('You have saved stocks. Would you like to load them?');\n      if (loadStocks) {\n        lsArray.forEach((stockCode) => this.sendSearchResult(false, stockCode));\n      } else {\n        localStorage.removeItem('historyStockArray');\n      }\n    }\n  };\n\n  sendSearchResult = async (torf, value) => {\n    const stockValue = torf\n      ? document.querySelector('.stock-code__value').value.toUpperCase()\n      : value;\n\n    const startDate = Math.round(new Date().getTime() / 1000);\n    const endDate = startDate - 72 * 3600;\n\n    if (this.state.search_stockArray.includes(stockValue)) {\n      alert('Already exists');\n      document.querySelector('.stock-code__value').value = '';\n      return;\n    }\n\n    try {\n      this.setState({ loading_api: true });\n\n      const [table_response, graph_response] = await Promise.all([\n        stock.get('/quote', {\n          params: {\n            symbol: stockValue,\n            token: 'bqhq9i7rh5rbubolrqd0',\n          },\n        }),\n        stock.get('/stock/candle', {\n          params: {\n            symbol: stockValue,\n            resolution: 5,\n            from: endDate,\n            to: startDate,\n            token: 'bqhq9i7rh5rbubolrqd0',\n          },\n        }),\n      ]);\n\n      if (\n        table_response.data.c === 0 &&\n        table_response.data.h === 0 &&\n        table_response.data.l === 0 &&\n        table_response.data.o === 0 &&\n        table_response.data.pc === 0 &&\n        table_response.data.t === 0\n      ) {\n        this.props.sendSearchGraphResult('no_data', '');\n      } else {\n        this.props.sendSearchGraphResult(true, {\n          stockValue,\n          response: graph_response.data,\n        });\n        this.props.sendSearchResult(table_response.data);\n      }\n\n      this.setState((prevState) => ({\n        search_stockArray: [...prevState.search_stockArray, stockValue],\n        loading_api: false,\n        inputValue: '', // Clear input field\n      }));\n    } catch (error) {\n      console.error('API error:', error);\n      this.setState({ loading_api: false });\n    }\n  };\n\n  handleInputChange = (e) => {\n    this.setState({ inputValue: e.target.value }, this.disableSearchButton);\n  };\n\n  render() {\n    const { inputValue, loading_api } = this.state;\n    return (\n      <div className=\"card card-container search\">\n        <div className=\"card-body\">\n          <h2 className=\"h6 mb-0\">Search Stock Code:</h2>\n          <input\n            type=\"text\"\n            className=\"form-control stock-code__value\"\n            placeholder=\"Stock Code (e.g. AAPL)\"\n            value={inputValue}\n            onChange={this.handleInputChange}\n          />\n          <button\n            className=\"btn btn-secondary w-100 btn-search\"\n            onClick={() => this.sendSearchResult(true, '')}\n            disabled={loading_api}\n          >\n            Search Results<FaSearch />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchCard;\n","import React, { Component } from 'react';\nimport '../css/styles.css';\nimport '../css/FilterCard.css';\nimport stock from '../apis/stock';\nimport { FaChartBar } from 'react-icons/fa';\n\nclass FilterCard extends Component {\n  state = {\n    validator_start_date: '',\n    validator_end_date: '',\n  };\n\n  componentDidUpdate() {\n    if (this.props.showFilterDOM) {\n      document.querySelector(\".btn-filter\").disabled = true;\n    }\n  }\n\n  start_dateValidator = (val) => {\n    let current_date = new Date();\n\n    this.setState({\n      validator_start_date: val,\n    }, () => {\n      if (\n        Date.parse(this.state.validator_start_date) < Date.parse(this.state.validator_end_date) &&\n        Date.parse(this.state.validator_start_date) < current_date &&\n        Date.parse(this.state.validator_end_date) < current_date\n      ) {\n        document.querySelector(\".btn-filter\").disabled = false;\n      } else {\n        document.querySelector(\".btn-filter\").disabled = true;\n      }\n    });\n  };\n\n  end_dateValidator = (val) => {\n    let current_date = new Date();\n\n    this.setState({\n      validator_end_date: val,\n    }, () => {\n      if (\n        Date.parse(this.state.validator_start_date) < Date.parse(this.state.validator_end_date) &&\n        Date.parse(this.state.validator_end_date) < current_date\n      ) {\n        document.querySelector(\".btn-filter\").disabled = false;\n      } else {\n        document.querySelector(\".btn-filter\").disabled = true;\n      }\n    });\n  };\n\n  filterMyChart = async () => {\n    let stockValue = document.querySelector(\".filter-select\").value;\n    let startDate = new Date(document.querySelector(\"input.start-date\").value) / 1000;\n    let endDate = new Date(document.querySelector(\"input.end-date\").value) / 1000;\n\n    const graph_response = await stock.get('/stock/candle', {\n      params: {\n        symbol: stockValue,\n        resolution: 5,\n        from: startDate,\n        to: endDate,\n        token: 'bqhq9i7rh5rbubolrqd0',\n      },\n    });\n\n    this.props.getFilteredData([startDate, endDate], { stockValue: stockValue, response: graph_response.data });\n    document.querySelector(\"input.start-date\").value = '';\n    document.querySelector(\"input.end-date\").value = '';\n  };\n\n  render() {\n    let optionSelectDOM = '';\n\n    optionSelectDOM = this.props.showGraphData.map((graphData, index) => (\n      <option\n        value={graphData.stockValue}\n        key={index}\n        selected={this.props.showGraphData[this.props.showGraphData.length - 1] === graphData ? \"selected\" : \"\"}\n      >\n        {graphData.stockValue}\n      </option>\n    ));\n\n    return (\n      <div className=\"card card-container filter\">\n        <div className=\"card-body\">\n          <h2 className=\"h6 mb-2\">Filter by Stock Code:</h2>\n          {this.props.showFilterDOM ? (\n            <div>\n              <select className=\"custom-select filter-select\">{optionSelectDOM}</select>\n              <div className=\"d-flex filter-card-date mt-2\">\n                <div className=\"filter-card-date-div\">\n                  <label className=\"mb-0\">Start Date:</label>\n                  <input className=\"form-control start-date\" type=\"date\" onChange={(e) => this.start_dateValidator(e.target.value)}></input>\n                </div>\n                <div className=\"filter-card-date-div\">\n                  <label className=\"mb-0\">End Date:</label>\n                  <input className=\"form-control end-date\" type=\"date\" onChange={(e) => this.end_dateValidator(e.target.value)}></input>\n                </div>\n              </div>\n              <button className=\"btn btn-secondary w-100 mt-3 btn-filter\" onClick={this.filterMyChart}>\n                Filter <FaChartBar />\n              </button>\n            </div>\n          ) : (\n            <p className=\"mb-0 no-filter-message\">No Stock Code to Filter. Please search stock code for more details</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FilterCard;\n","import React from 'react';\nimport '../css/styles.css';\nimport '../css/TableDataCard.css';\n\nclass TableDataCard extends React.Component {\n  state = {\n    currency: '$',\n  };\n\n  render() {\n    let tableDataDOM = '';\n\n    // @dom: show all values in the table\n    tableDataDOM = this.props.tableData.map((table, index) => {\n      // @condition: check if there is a viable response from the API call (e.g. AAAA doesn't exist)\n      if (table !== 'Symbol not supported') {\n        return (\n          <tr key={index}>\n            <th scope=\"row\">{this.props.graphData[index].stockValue}</th>\n            <td>{new Date(table.t * 1000).toLocaleDateString()}</td>\n\n            {/* Open Price */}\n            <td\n              className={`${\n                this.state.currency + table.o.toFixed(2) >\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {this.state.currency + table.o.toFixed(2)}\n            </td>\n\n            {/* Low Price */}\n            <td\n              className={`${\n                this.state.currency + table.l.toFixed(2) >\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {this.state.currency + table.l.toFixed(2)}\n            </td>\n\n            {/* High Price */}\n            <td\n              className={`${\n                this.state.currency + table.h.toFixed(2) >\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {this.state.currency + table.h.toFixed(2)}\n            </td>\n\n            {/* Previous Close Price */}\n            <td\n              className={`${\n                this.state.currency + table.c.toFixed(2) <\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {this.state.currency + table.pc.toFixed(2)}\n            </td>\n\n            {/* Close Price */}\n            <td\n              className={`${\n                this.state.currency + table.c.toFixed(2) >\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {this.state.currency + table.c.toFixed(2)}\n            </td>\n\n            {/* PC/C percentage */}\n            <td\n              className={`${\n                this.state.currency + table.c.toFixed(2) >\n                this.state.currency + table.pc.toFixed(2)\n                  ? 'green-text'\n                  : 'red-text'\n              } font-weight-bold`}\n            >\n              {`${(\n                100 -\n                (table.pc.toFixed(2) / table.c.toFixed(2)) * 100\n              ).toFixed(2)}%`}\n            </td>\n          </tr>\n        );\n      }\n      return null; // Skip rendering for unsupported symbols\n    });\n\n    return (\n      <div className=\"card card-container table-data\">\n        <div className=\"card-body\">\n          <h2 className=\"h6 mb-3\">Latest available data:</h2>\n          {this.props.showTableData ? (\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Stock Code</th>\n                    <th scope=\"col\">Last Updated Data</th>\n                    <th scope=\"col\">Open Price</th>\n                    <th scope=\"col\">Low Price</th>\n                    <th scope=\"col\">High Price</th>\n                    <th scope=\"col\">Previous Close Price</th>\n                    <th scope=\"col\">Current Price</th>\n                    <th scope=\"col\">% From Yesterday</th>\n                  </tr>\n                </thead>\n                <tbody>{tableDataDOM}</tbody>\n              </table>\n            </div>\n          ) : (\n            <p className=\"mb-0 no-data-message\">\n              There is currently no available data. Please search for a stock code for more details.\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TableDataCard;\n","import React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends Component {\n  chartRef = React.createRef();\n  chartInstance = null;\n\n  componentDidMount() {\n    this.createChart();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.showGraphData && prevProps.graphData !== this.props.graphData) {\n      this.updateChart();\n    }\n  }\n\n  createChart() {\n    const { graphData } = this.props;\n    const lowOrHighColor = graphData.y_axis[0] < graphData.y_axis[graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f';\n\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false, // Ensure the chart resizes correctly\n      plugins: {\n        tooltip: {\n          enabled: true,\n          mode: 'point',\n        },\n      },\n      scales: {\n        x: {\n          display: false,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)', // Light grid lines\n          },\n        },\n        y: {\n          display: true,\n          stepSize: 5,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)', // Light grid lines\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n      },\n      plugins: {\n        legend: {\n          display: false,\n        },\n      },\n    };\n\n    const ctx = this.chartRef.current.getContext('2d');\n    this.chartInstance = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: graphData.x_axis,\n        datasets: [\n          {\n            data: graphData.y_axis,\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            borderColor: lowOrHighColor,\n            borderWidth: 2, // Increase line thickness\n          },\n        ],\n      },\n      options: chartOptions,\n    });\n\n    // Add interactivity: Update chart when the cursor enters or leaves the chart area\n    this.chartRef.current.addEventListener('mouseenter', this.handleMouseEnter);\n    this.chartRef.current.addEventListener('mouseleave', this.handleMouseLeave);\n  }\n\n  updateChart() {\n    const { graphData } = this.props;\n    // Update chart data and re-render\n    this.chartInstance.data.labels = graphData.x_axis;\n    this.chartInstance.data.datasets[0].data = graphData.y_axis;\n    this.chartInstance.update();\n  }\n\n  handleMouseEnter = () => {\n    // Handle chart hover effects here\n    if (this.chartInstance) {\n      const dataset = this.chartInstance.data.datasets[0];\n      // Change the border color to a brighter color on hover\n      dataset.borderColor = 'rgba(255, 99, 132, 1)';\n      // Increase the line thickness on hover\n      dataset.borderWidth = 3;\n      // Redraw the chart with animation to reflect the changes\n      this.chartInstance.update({ duration: 200, easing: 'linear' });\n    }\n  };\n\n  handleMouseLeave = () => {\n    // Reset chart hover effects here\n    if (this.chartInstance) {\n      const dataset = this.chartInstance.data.datasets[0];\n      // Reset border color to the original color\n      dataset.borderColor = 'rgba(129, 183, 55, 1)';\n      // Reset line thickness to the original value\n      dataset.borderWidth = 2;\n      // Redraw the chart with animation to reflect the changes\n      this.chartInstance.update({ duration: 200, easing: 'linear' });\n    }\n  };\n\n  convertToDate = (str) => {\n    const date = new Date(str);\n    const mnth = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${date.getFullYear()}-${mnth}-${day}`;\n  };\n\n  render() {\n    const { graphData } = this.props;\n    return (\n      <div className=\"main__chart\" id={`myChart-${graphData.stockValue}`}>\n        <div>\n          <h2 className=\"h5 mb-3 stockValue\">\n            {graphData.stockValue}\n            {graphData.date_data ? (\n              <div className=\"ml-2 d-inline\">\n                <span>\n                  (\n                  {this.convertToDate(graphData.date_data.filteredStartDate)}&nbsp;to&nbsp;\n                  {this.convertToDate(graphData.date_data.filteredEndDate)}\n                  )\n                </span>\n              </div>\n            ) : (\n              <div className=\"ml-2 d-inline\">(Last 72 Hours)</div>\n            )}\n          </h2>\n          <canvas className=\"myChart\" ref={this.chartRef} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GraphCard;\n","import React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n// import Navbar from './Navbar';\n\n\nclass App extends React.Component {\n  state = {\n    tableData: [],\n    graphData: [],\n    activeStockValue: '',\n    showFilterDOM: false,\n    showFilterData: false,\n    showTableData: false,\n    showGraphData: false,\n    lsArray: [],\n    option: [],\n  };\n\n  componentDidUpdate() {\n    this.state.graphData.map((graphData, index) => {\n      const chartElement = document.querySelector('#myChart-' + graphData.stockValue);\n      if (chartElement) {\n        chartElement.style.display = 'none';\n      }\n      if (index === this.state.graphData.length - 1) {\n        chartElement.style.display = 'block';\n      }\n    });\n  }\n\n  sendSearchResult = (data) => {\n    if (data !== 'Symbol not supported') {\n      this.setState({\n        tableData: this.state.tableData.concat(data),\n        showFilterDOM: true,\n        showTableData: true,\n      });\n    }\n  };\n\n  getFilteredData = (date, response_data) => {\n    let abc = this.state.graphData;\n    let converted_array = [];\n\n    for (let i = 0; i < abc.length; i++) {\n      let obj = abc[i];\n\n      if (response_data.stockValue.indexOf(obj.stockValue) !== -1) {\n        converted_array = [];\n        for (let i = 0; i < response_data.response.t.length; i++) {\n          converted_array.push(new Date(response_data.response.t[i] * 1000));\n        }\n        abc.splice(i, 1);\n        abc.push({\n          stockValue: response_data.stockValue,\n          x_axis: converted_array,\n          y_axis: response_data.response.c,\n          date_data: {\n            filteredStartDate: new Date(date[0] * 1000),\n            filteredEndDate: new Date(date[1] * 1000),\n          },\n        });\n        this.setState(\n          {\n            graphData: abc,\n            activeStockValue: response_data.stockValue,\n            showGraphData: true,\n          },\n          () => {\n            this.setState({\n              showGraphData: true,\n            });\n          }\n        );\n      }\n    }\n  };\n\n  sendSearchGraphResult = (codeExist, graph_array) => {\n    if (codeExist !== 'no_data') {\n      let converted_array = [];\n\n      this.setState(\n        {\n          lsArray: this.state.lsArray.concat(graph_array.stockValue),\n        },\n        () => {\n          localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n        }\n      );\n\n      if (graph_array.response.s !== 'no_data') {\n        for (let i = 0; i < graph_array.response.t.length; i++) {\n          converted_array.push(new Date(graph_array.response.t[i] * 1000));\n        }\n        this.setState(\n          {\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              x_axis: converted_array,\n              y_axis: graph_array.response.c,\n            }),\n            activeStockValue: graph_array.stockValue,\n            showGraphData: true,\n          },\n          () => {\n            this.setState({\n              showGraphData: true,\n            });\n          }\n        );\n      } else {\n        this.setState(\n          {\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              response: 'no_data',\n              showGraphData: true,\n            }),\n          },\n          () => {\n            this.setState({\n              showGraphData: true,\n            });\n          }\n        );\n      }\n    } else {\n      alert('Stock Code does not exist within the Database.');\n      window.location.reload(true);\n    }\n  };\n\n  checkStockCode = (stockValue) => {\n    this.state.graphData.map((graphData, index) => {\n      const chartElement = document.querySelector('#myChart-' + graphData.stockValue);\n      if (chartElement) {\n        chartElement.style.display = 'none';\n      }\n      if (index === this.state.graphData.length - 1) {\n        chartElement.style.display = 'block';\n      }\n    });\n\n    this.setState({\n      activeStockValue: stockValue,\n    });\n  };\n\n  render() {\n    let graphCardDOM = '';\n    let optionSelectDOM = '';\n\n    if (this.state.showGraphData) {\n      graphCardDOM = this.state.graphData.map((graphData, index) => {\n        if (graphData.response !== 'no_data') {\n          const displayStyle = graphData.stockValue === this.state.activeStockValue ? 'block' : 'none';\n          return (\n            <GraphCard\n              key={index}\n              tableData={this.state.tableData}\n              showGraphData={this.state.showGraphData}\n              showActiveStockCode={this.state.activeStockValue}\n              graphData={graphData}\n              filteredData={this.state.filteredData}\n              showFilterData={this.state.showFilterData}\n              displayStyle={displayStyle}\n            ></GraphCard>\n          );\n        } else {\n          return (\n            <p key={index} className=\"no-graph-data-message\">\n              No Data Currently Available. Markets are closed during weekends and public holidays. Please filter by previous date.\n            </p>\n          );\n        }\n      });\n    }\n\n    optionSelectDOM = this.state.graphData.map((graphData, index) => {\n      return (\n        <option\n          value={graphData.stockValue}\n          key={index}\n          selected={this.state.graphData[this.state.graphData.length - 1] === graphData ? 'selected' : ''}\n        >\n          {graphData.stockValue}\n        </option>\n      );\n    });\n\n    return (\n      <div className=\"container-fluid app-container\">\n               {/* <Navbar /> */}\n        <div className=\"row\">\n          <div className=\"col-lg-2 sidebar\">\n            <ul className=\"nav flex-column\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" href=\"#\">\n                  Dashboard\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Settings\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Accounts\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Orders\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-lg-10 content\">\n            <div className=\"row app-container__row\">\n              <div className=\"col-12 app-container__container\">\n                <div className=\"app-container__left\">\n                  <SearchCard sendSearchResult={this.sendSearchResult} sendSearchGraphResult={this.sendSearchGraphResult}></SearchCard>\n                  <FilterCard showFilterDOM={this.state.showFilterDOM} showGraphData={this.state.graphData} showActiveStockCode={this.state.activeStockValue} getFilteredData={this.getFilteredData}></FilterCard>\n                </div>\n                <div className=\"app-container__right\">\n                  <div className=\"card card-container graph\">\n                    <div className=\"card-body\">\n                      {this.state.showGraphData ? (\n                        <div>\n                          <select className=\"custom-select main__chart-select\" onChange={(e) => this.checkStockCode(e.target.value)}>\n                            {optionSelectDOM}\n                          </select>\n                          {graphCardDOM}\n                        </div>\n                      ) : (\n                        <p className=\"no-graph-data-message\">\n                          No current stock found. Please go to the first box and search for a stock.\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row table-data-row\">\n              <div className=\"col-12 table-data-col\">\n                <TableDataCard showTableData={this.state.showTableData} tableData={this.state.tableData} graphData={this.state.graphData}></TableDataCard>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App/>,\n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}