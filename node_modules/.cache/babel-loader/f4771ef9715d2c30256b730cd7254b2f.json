{"ast":null,"code":"var _jsxFileName = \"/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/App.js\";\n// import React from 'react';\n// import SearchCard from './SearchCard';\n// import FilterCard from './FilterCard';\n// import TableDataCard from './TableDataCard';\n// import GraphCard from './GraphCard';\n// import '../css/styles.css';\n// class App extends React.Component{\n//     // TODO: load circle bar\n//     state = {\n//         tableData: [],\n//         graphData: [],\n//         activeStockValue: '',\n//         showFilterDOM: false,\n//         showFilterData: false,\n//         showTableData: false,\n//         showGraphData: false,\n//         lsArray: [],\n//         option: []\n//     };\n//     // @desc: this componentDidUpdate is showing the latest graph which has \n//     //        been searched and hiding the rest\n//     componentDidUpdate(){\n//         this.state.graphData.map((graphData, index) => {\n//             document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n//             if(index === this.state.graphData.length - 1){\n//                 document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n//             }\n//         }); \n//     };\n//     // @desc: SearchCard.js does an API call and sends the relevant data for\n//     //        the TableDataCard.js, through this you need to truesy the showFilterDOM,\n//     //        and showTableData to show the user actual representable DOM.\n//     // @param: data     => an object which has current, highest, lowest etc. values\n//     //         response => {c: 289.07, h: 299, l: 285.85, o: 286.25, pc: 293.8, t: 1588487630}\n//     sendSearchResult = (data) => {\n//         if(data !== \"Symbol not supported\"){\n//             this.setState({ \n//                 tableData: this.state.tableData.concat(data),\n//                 showFilterDOM: true,\n//                 showTableData: true\n//             });\n//         };\n//     };\n//     // @desc: FilterCard.js does an API call and sends the response_data which is the\n//     //        stockValue and the actual response from the API. From this you want to \n//     //        remove the old graph which was in the graphData and insert the new data.\n//     //        This also adds readable date for the x_axis data.\n//     // @params: date => start and end date of the filtered value\n//     //          response_data => stockValue must be a string and response is an object\n//     //          response      => {stockValue: stockValue, response: graph_response.data}\n//     getFilteredData = (date, response_data) => {\n//         let abc = this.state.graphData;\n//         let converted_array = [];   \n//         for(let i = 0; i < abc.length; i++){\n//             let obj = abc[i];\n//             if(response_data.stockValue.indexOf(obj.stockValue) !== -1){\n//                 converted_array = [];\n//                 for(let i = 0; i < response_data.response.t.length; i++){\n//                     converted_array.push(new Date(response_data.response.t[i] * 1000))\n//                 };\n//                 abc.splice(i, 1);\n//                 abc.push({\n//                     stockValue: response_data.stockValue,\n//                     x_axis: converted_array,\n//                     y_axis: response_data.response.c,\n//                     date_data: {\n//                         filteredStartDate: new Date(date[0]*1000),\n//                         filteredEndDate: new Date(date[1]*1000)\n//                     }\n//                 });\n//                 this.setState({\n//                     graphData: abc,\n//                     activeStockValue: response_data.stockValue,\n//                     showGraphData: true\n//                 }, () => {\n//                     this.setState({\n//                         showGraphData: true\n//                     })\n//                 });\n//             };\n//         };\n//     };\n//     // @desc: SearchCard.js does an API call and sends the graph_array which is the\n//     //        stockValue and the actual response from the API. This changes the unix\n//     //        time stamp to readable js time in the x_axis.\n//     // @param: graph_array => stockValue must be a string and an object of response\n//     //         response    => { stockValue: AAPL, response: {c: Array(179), h: Array(179) â€¦} }\n//     sendSearchGraphResult = (codeExist, graph_array) => {\n//         if(codeExist != \"no_data\"){\n//             let converted_array = [];\n//             this.setState({\n//                 lsArray: this.state.lsArray.concat(graph_array.stockValue)\n//             }, () => {\n//                 localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n//             });\n//             if(graph_array.response.s !== \"no_data\"){\n//                 for(let i = 0; i < graph_array.response.t.length; i++){\n//                     converted_array.push(new Date(graph_array.response.t[i] * 1000))\n//                 };\n//                 this.setState({\n//                     graphData: this.state.graphData.concat({\n//                         stockValue: graph_array.stockValue,\n//                         x_axis: converted_array,\n//                         y_axis: graph_array.response.c,\n//                     }),\n//                     activeStockValue: graph_array.stockValue,\n//                     showGraphData: true\n//                 }, () => {\n//                     // this makes the second graph and above show\n//                     this.setState({\n//                         showGraphData: true\n//                     });\n//                 });\n//             }else{\n//                 this.setState({\n//                     graphData: this.state.graphData.concat({\n//                         stockValue: graph_array.stockValue, \n//                         response: \"no_data\",\n//                         showGraphData: true\n//                     })\n//                 }, () => {\n//                     this.setState({\n//                         showGraphData: true\n//                     });\n//                 });\n//             }\n//         }else{\n//             alert(\"Stock Code does not exist within the Database.\");\n//             window.location.reload(true);\n//         };\n//     };\n//     // @desc: same as componentDidUpdate, hide all and display only that has been selected\n//     // @param: stockValue => string of the select (e.g. AAPL)\n//     checkStockCode = (stockValue) => {\n//         this.state.graphData.map((graphData, index) => {\n//             document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n//             if(index === this.state.graphData.length - 1){\n//                 document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n//             }\n//         }); \n//     }\n//     render(){\n//         let graphCardDOM = '';\n//         let optionSelectDOM = '';\n//         // @condition: check if showGraphData is true\n//         if(this.state.showGraphData){\n//             // loop through the data and make each graph\n//             graphCardDOM = this.state.graphData.map((graphData, index) => {\n//                 if(graphData.response !== \"no_data\"){\n//                     return (\n//                         <GraphCard\n//                             key = { index }\n//                             tableData = { this.state.tableData }\n//                             showGraphData = { this.state.showGraphData }\n//                             showActiveStockCode = { this.state.activeStockValue }\n//                             graphData = { graphData }\n//                             filteredData = { this.state.filteredData }\n//                             showFilterData = { this.state.showFilterData }>\n//                         </GraphCard>\n//                     );\n//                 }else{\n//                     return(\n//                         <p key={ index } \n//                            className=\"no-graph-data-message\">\n//                             No Data Currently Available. Markets are closed during weekends \n//                             and public holidays. Please filter by previous date.\n//                         </p>\n//                     )\n//                 };\n//             });\n//         };\n//         // @dom: show all the stock value as a option in select\n//         optionSelectDOM = this.state.graphData.map((graphData, index) => {\n//             return (\n//                 <option \n//                 value={ graphData.stockValue } \n//                 key={ index }\n//                 selected={ this.state.graphData[this.state.graphData.length - 1] === graphData ? \"selected\" : \"\" }>\n//                   { graphData.stockValue }\n//                 </option>\n//             )\n//         });\n//         return (\n//             <div className=\"container-fluid app-container\">\n//         <div className=\"row\">\n//           <div className=\"col-lg-2 sidebar\">\n//             <ul className=\"nav flex-column\">\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link active\" href=\"#\">\n//                   Dashboard\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Settings\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Accounts\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Orders\n//                 </a>\n//               </li>\n//             </ul>\n//           </div>\n//           <div className=\"col-lg-10 content\">\n//             <div className=\"row app-container__row\">\n//               <div className=\"col-12 app-container__container\">\n//                 <div className=\"app-container__left\">\n//                 <SearchCard sendSearchResult={this.sendSearchResult} sendSearchGraphResult={this.sendSearchGraphResult}></SearchCard>\n//                   <FilterCard showFilterDOM={this.state.showFilterDOM} showGraphData={this.state.graphData} showActiveStockCode={this.state.activeStockValue} getFilteredData={this.getFilteredData}></FilterCard>\n//                 </div>\n//                 <div className=\"app-container__right\">\n//                   <div className=\"card card-container graph\">\n//                     <div className=\"card-body\">\n//                       {this.state.showGraphData ? (\n//                         <div>\n//                           <select className=\"custom-select main__chart-select\" onChange={(e) => this.checkStockCode(e.target.value)}>\n//                             {optionSelectDOM}\n//                           </select>\n//                           {graphCardDOM}\n//                         </div>\n//                       ) : (\n//                         <p className=\"no-graph-data-message\">\n//                           No current stock found. Please go to the first box and search for a stock.\n//                         </p>\n//                       )}\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"row table-data-row\">\n//               <div className=\"col-12 table-data-col\">\n//                 <TableDataCard showTableData={this.state.showTableData} tableData={this.state.tableData} graphData={this.state.graphData}></TableDataCard>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//         );\n//     };\n// };\n// export default App;\nimport React, { Component } from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendSearchResult = data => {\n      if (data !== \"Symbol not supported\") {\n        this.setState(prevState => ({\n          tableData: [...prevState.tableData, data],\n          showFilterDOM: true,\n          showTableData: true\n        }));\n      }\n    };\n\n    this.getFilteredData = (date, response_data) => {\n      let {\n        graphData\n      } = this.state;\n      let converted_array = [];\n\n      for (let i = 0; i < graphData.length; i++) {\n        let obj = graphData[i];\n\n        if (response_data.stockValue.indexOf(obj.stockValue) !== -1) {\n          converted_array = [];\n\n          for (let i = 0; i < response_data.response.t.length; i++) {\n            converted_array.push(new Date(response_data.response.t[i] * 1000));\n          }\n\n          graphData.splice(i, 1);\n          graphData.push({\n            stockValue: response_data.stockValue,\n            x_axis: converted_array,\n            y_axis: response_data.response.c,\n            date_data: {\n              filteredStartDate: new Date(date[0] * 1000),\n              filteredEndDate: new Date(date[1] * 1000)\n            }\n          });\n          this.setState({\n            graphData,\n            activeStockValue: response_data.stockValue,\n            showGraphData: true\n          });\n        }\n      }\n    };\n\n    this.sendSearchGraphResult = (codeExist, graph_array) => {\n      if (codeExist !== \"no_data\") {\n        let converted_array = [];\n        this.setState(prevState => ({\n          lsArray: [...prevState.lsArray, graph_array.stockValue]\n        }), () => {\n          localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n        });\n\n        if (graph_array.response.s !== \"no_data\") {\n          for (let i = 0; i < graph_array.response.t.length; i++) {\n            converted_array.push(new Date(graph_array.response.t[i] * 1000));\n          }\n\n          this.setState(prevState => ({\n            graphData: [...prevState.graphData, {\n              stockValue: graph_array.stockValue,\n              x_axis: converted_array,\n              y_axis: graph_array.response.c\n            }],\n            activeStockValue: graph_array.stockValue,\n            showGraphData: true\n          }));\n        } else {\n          this.setState(prevState => ({\n            graphData: [...prevState.graphData, {\n              stockValue: graph_array.stockValue,\n              response: \"no_data\",\n              showGraphData: true\n            }]\n          }));\n        }\n      } else {\n        alert(\"Stock Code does not exist within the Database.\");\n        window.location.reload(true);\n      }\n    };\n\n    this.checkStockCode = stockValue => {\n      this.state.graphData.forEach((graphData, index) => {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n        if (index === this.state.graphData.length - 1) {\n          document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n        }\n      });\n    };\n\n    this.state = {\n      tableData: [],\n      graphData: [],\n      activeStockValue: '',\n      showFilterDOM: false,\n      showFilterData: false,\n      showTableData: false,\n      showGraphData: false,\n      lsArray: [],\n      option: []\n    };\n  }\n\n  componentDidUpdate() {\n    this.state.graphData.map((graphData, index) => {\n      document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n      if (index === this.state.graphData.length - 1) {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n      }\n    });\n  }\n\n  render() {\n    const {\n      showGraphData,\n      activeStockValue,\n      graphData,\n      tableData\n    } = this.state;\n    const graphCardDOM = showGraphData ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select main__chart-select\",\n      onChange: e => this.checkStockCode(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }\n    }, graphData.map((graphData, index) => /*#__PURE__*/React.createElement(\"option\", {\n      value: graphData.stockValue,\n      key: index,\n      selected: graphData === graphData[graphData.length - 1] ? \"selected\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 13\n      }\n    }, graphData.stockValue))), graphData.map((graphData, index) => /*#__PURE__*/React.createElement(GraphCard, {\n      key: index,\n      tableData: tableData,\n      showGraphData: showGraphData,\n      showActiveStockCode: activeStockValue,\n      graphData: graphData,\n      filteredData: this.state.filteredData,\n      showFilterData: this.state.showFilterData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }\n    }))) : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"no-graph-data-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 7\n      }\n    }, \"No current stock found. Please go to the first box and search for a stock.\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-2 sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"nav flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link active\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }\n    }, \"Dashboard\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 17\n      }\n    }, \"Settings\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }\n    }, \"Accounts\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }\n    }, \"Orders\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-10 content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row app-container__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 app-container__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container__left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SearchCard, {\n      sendSearchResult: this.sendSearchResult,\n      sendSearchGraphResult: this.sendSearchGraphResult,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FilterCard, {\n      showFilterDOM: this.state.showFilterDOM,\n      showGraphData: this.state.graphData,\n      showActiveStockCode: this.state.activeStockValue,\n      getFilteredData: this.getFilteredData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container__right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card card-container graph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }\n    }, this.state.showGraphData ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select main__chart-select\",\n      onChange: e => this.checkStockCode(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 27\n      }\n    }, optionSelectDOM), graphCardDOM) : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"no-graph-data-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 25\n      }\n    }, \"No current stock found. Please go to the first box and search for a stock.\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row table-data-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 table-data-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableDataCard, {\n      showTableData: this.state.showTableData,\n      tableData: this.state.tableData,\n      graphData: this.state.graphData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }\n    }))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/App.js"],"names":["React","Component","SearchCard","FilterCard","TableDataCard","GraphCard","App","constructor","props","sendSearchResult","data","setState","prevState","tableData","showFilterDOM","showTableData","getFilteredData","date","response_data","graphData","state","converted_array","i","length","obj","stockValue","indexOf","response","t","push","Date","splice","x_axis","y_axis","c","date_data","filteredStartDate","filteredEndDate","activeStockValue","showGraphData","sendSearchGraphResult","codeExist","graph_array","lsArray","localStorage","setItem","JSON","stringify","s","alert","window","location","reload","checkStockCode","forEach","index","document","querySelector","style","display","showFilterData","option","componentDidUpdate","map","render","graphCardDOM","e","target","value","filteredData","optionSelectDOM"],"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","sourcesContent":["// import React from 'react';\n// import SearchCard from './SearchCard';\n// import FilterCard from './FilterCard';\n// import TableDataCard from './TableDataCard';\n// import GraphCard from './GraphCard';\n// import '../css/styles.css';\n\n// class App extends React.Component{\n    \n//     // TODO: load circle bar\n\n//     state = {\n//         tableData: [],\n//         graphData: [],\n//         activeStockValue: '',\n//         showFilterDOM: false,\n//         showFilterData: false,\n//         showTableData: false,\n//         showGraphData: false,\n//         lsArray: [],\n//         option: []\n//     };\n\n//     // @desc: this componentDidUpdate is showing the latest graph which has \n//     //        been searched and hiding the rest\n//     componentDidUpdate(){\n//         this.state.graphData.map((graphData, index) => {\n//             document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n//             if(index === this.state.graphData.length - 1){\n//                 document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n//             }\n//         }); \n//     };\n\n//     // @desc: SearchCard.js does an API call and sends the relevant data for\n//     //        the TableDataCard.js, through this you need to truesy the showFilterDOM,\n//     //        and showTableData to show the user actual representable DOM.\n//     // @param: data     => an object which has current, highest, lowest etc. values\n//     //         response => {c: 289.07, h: 299, l: 285.85, o: 286.25, pc: 293.8, t: 1588487630}\n//     sendSearchResult = (data) => {\n//         if(data !== \"Symbol not supported\"){\n//             this.setState({ \n//                 tableData: this.state.tableData.concat(data),\n//                 showFilterDOM: true,\n//                 showTableData: true\n//             });\n//         };\n//     };\n\n//     // @desc: FilterCard.js does an API call and sends the response_data which is the\n//     //        stockValue and the actual response from the API. From this you want to \n//     //        remove the old graph which was in the graphData and insert the new data.\n//     //        This also adds readable date for the x_axis data.\n//     // @params: date => start and end date of the filtered value\n//     //          response_data => stockValue must be a string and response is an object\n//     //          response      => {stockValue: stockValue, response: graph_response.data}\n//     getFilteredData = (date, response_data) => {\n//         let abc = this.state.graphData;\n//         let converted_array = [];   \n        \n//         for(let i = 0; i < abc.length; i++){\n//             let obj = abc[i];\n\n//             if(response_data.stockValue.indexOf(obj.stockValue) !== -1){\n//                 converted_array = [];\n//                 for(let i = 0; i < response_data.response.t.length; i++){\n//                     converted_array.push(new Date(response_data.response.t[i] * 1000))\n//                 };\n//                 abc.splice(i, 1);\n//                 abc.push({\n//                     stockValue: response_data.stockValue,\n//                     x_axis: converted_array,\n//                     y_axis: response_data.response.c,\n//                     date_data: {\n//                         filteredStartDate: new Date(date[0]*1000),\n//                         filteredEndDate: new Date(date[1]*1000)\n//                     }\n//                 });\n//                 this.setState({\n//                     graphData: abc,\n//                     activeStockValue: response_data.stockValue,\n//                     showGraphData: true\n//                 }, () => {\n//                     this.setState({\n//                         showGraphData: true\n//                     })\n//                 });\n//             };\n//         };\n//     };\n\n//     // @desc: SearchCard.js does an API call and sends the graph_array which is the\n//     //        stockValue and the actual response from the API. This changes the unix\n//     //        time stamp to readable js time in the x_axis.\n//     // @param: graph_array => stockValue must be a string and an object of response\n//     //         response    => { stockValue: AAPL, response: {c: Array(179), h: Array(179) â€¦} }\n//     sendSearchGraphResult = (codeExist, graph_array) => {\n//         if(codeExist != \"no_data\"){\n//             let converted_array = [];\n        \n//             this.setState({\n//                 lsArray: this.state.lsArray.concat(graph_array.stockValue)\n//             }, () => {\n//                 localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n//             });\n    \n//             if(graph_array.response.s !== \"no_data\"){\n//                 for(let i = 0; i < graph_array.response.t.length; i++){\n//                     converted_array.push(new Date(graph_array.response.t[i] * 1000))\n//                 };\n//                 this.setState({\n//                     graphData: this.state.graphData.concat({\n//                         stockValue: graph_array.stockValue,\n//                         x_axis: converted_array,\n//                         y_axis: graph_array.response.c,\n//                     }),\n//                     activeStockValue: graph_array.stockValue,\n//                     showGraphData: true\n//                 }, () => {\n//                     // this makes the second graph and above show\n//                     this.setState({\n//                         showGraphData: true\n//                     });\n//                 });\n//             }else{\n//                 this.setState({\n//                     graphData: this.state.graphData.concat({\n//                         stockValue: graph_array.stockValue, \n//                         response: \"no_data\",\n//                         showGraphData: true\n//                     })\n//                 }, () => {\n//                     this.setState({\n//                         showGraphData: true\n//                     });\n//                 });\n//             }\n//         }else{\n//             alert(\"Stock Code does not exist within the Database.\");\n//             window.location.reload(true);\n//         };\n//     };\n\n//     // @desc: same as componentDidUpdate, hide all and display only that has been selected\n\n//     // @param: stockValue => string of the select (e.g. AAPL)\n//     checkStockCode = (stockValue) => {\n//         this.state.graphData.map((graphData, index) => {\n//             document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n//             if(index === this.state.graphData.length - 1){\n//                 document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n//             }\n//         }); \n//     }\n\n//     render(){\n//         let graphCardDOM = '';\n//         let optionSelectDOM = '';\n\n//         // @condition: check if showGraphData is true\n//         if(this.state.showGraphData){\n//             // loop through the data and make each graph\n//             graphCardDOM = this.state.graphData.map((graphData, index) => {\n//                 if(graphData.response !== \"no_data\"){\n//                     return (\n//                         <GraphCard\n//                             key = { index }\n//                             tableData = { this.state.tableData }\n//                             showGraphData = { this.state.showGraphData }\n//                             showActiveStockCode = { this.state.activeStockValue }\n//                             graphData = { graphData }\n//                             filteredData = { this.state.filteredData }\n//                             showFilterData = { this.state.showFilterData }>\n//                         </GraphCard>\n//                     );\n//                 }else{\n//                     return(\n//                         <p key={ index } \n//                            className=\"no-graph-data-message\">\n//                             No Data Currently Available. Markets are closed during weekends \n//                             and public holidays. Please filter by previous date.\n//                         </p>\n//                     )\n//                 };\n//             });\n//         };\n  \n//         // @dom: show all the stock value as a option in select\n//         optionSelectDOM = this.state.graphData.map((graphData, index) => {\n//             return (\n//                 <option \n//                 value={ graphData.stockValue } \n//                 key={ index }\n//                 selected={ this.state.graphData[this.state.graphData.length - 1] === graphData ? \"selected\" : \"\" }>\n//                   { graphData.stockValue }\n//                 </option>\n//             )\n//         });\n\n//         return (\n//             <div className=\"container-fluid app-container\">\n//         <div className=\"row\">\n//           <div className=\"col-lg-2 sidebar\">\n//             <ul className=\"nav flex-column\">\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link active\" href=\"#\">\n//                   Dashboard\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Settings\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Accounts\n//                 </a>\n//               </li>\n//               <li className=\"nav-item\">\n//                 <a className=\"nav-link\" href=\"#\">\n//                   Orders\n//                 </a>\n//               </li>\n//             </ul>\n//           </div>\n//           <div className=\"col-lg-10 content\">\n//             <div className=\"row app-container__row\">\n                \n//               <div className=\"col-12 app-container__container\">\n//                 <div className=\"app-container__left\">\n//                 <SearchCard sendSearchResult={this.sendSearchResult} sendSearchGraphResult={this.sendSearchGraphResult}></SearchCard>\n//                   <FilterCard showFilterDOM={this.state.showFilterDOM} showGraphData={this.state.graphData} showActiveStockCode={this.state.activeStockValue} getFilteredData={this.getFilteredData}></FilterCard>\n//                 </div>\n//                 <div className=\"app-container__right\">\n//                   <div className=\"card card-container graph\">\n//                     <div className=\"card-body\">\n//                       {this.state.showGraphData ? (\n//                         <div>\n//                           <select className=\"custom-select main__chart-select\" onChange={(e) => this.checkStockCode(e.target.value)}>\n//                             {optionSelectDOM}\n//                           </select>\n//                           {graphCardDOM}\n//                         </div>\n//                       ) : (\n//                         <p className=\"no-graph-data-message\">\n//                           No current stock found. Please go to the first box and search for a stock.\n//                         </p>\n//                       )}\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"row table-data-row\">\n//               <div className=\"col-12 table-data-col\">\n//                 <TableDataCard showTableData={this.state.showTableData} tableData={this.state.tableData} graphData={this.state.graphData}></TableDataCard>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//         );\n//     };\n// };\n\n// export default App;\n\n\n\n\nimport React, { Component } from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tableData: [],\n      graphData: [],\n      activeStockValue: '',\n      showFilterDOM: false,\n      showFilterData: false,\n      showTableData: false,\n      showGraphData: false,\n      lsArray: [],\n      option: [],\n    };\n  }\n\n  componentDidUpdate() {\n    this.state.graphData.map((graphData, index) => {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n        if(index === this.state.graphData.length - 1){\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n        }\n    }); \n  }\n\n  sendSearchResult = (data) => {\n    if (data !== \"Symbol not supported\") {\n      this.setState((prevState) => ({\n        tableData: [...prevState.tableData, data],\n        showFilterDOM: true,\n        showTableData: true,\n      }));\n    }\n  };\n\n  getFilteredData = (date, response_data) => {\n    let { graphData } = this.state;\n    let converted_array = [];\n\n    for (let i = 0; i < graphData.length; i++) {\n      let obj = graphData[i];\n\n      if (response_data.stockValue.indexOf(obj.stockValue) !== -1) {\n        converted_array = [];\n        for (let i = 0; i < response_data.response.t.length; i++) {\n          converted_array.push(new Date(response_data.response.t[i] * 1000));\n        }\n        graphData.splice(i, 1);\n        graphData.push({\n          stockValue: response_data.stockValue,\n          x_axis: converted_array,\n          y_axis: response_data.response.c,\n          date_data: {\n            filteredStartDate: new Date(date[0] * 1000),\n            filteredEndDate: new Date(date[1] * 1000),\n          },\n        });\n        this.setState({\n          graphData,\n          activeStockValue: response_data.stockValue,\n          showGraphData: true,\n        });\n      }\n    }\n  };\n\n  sendSearchGraphResult = (codeExist, graph_array) => {\n    if (codeExist !== \"no_data\") {\n      let converted_array = [];\n\n      this.setState((prevState) => ({\n        lsArray: [...prevState.lsArray, graph_array.stockValue],\n      }), () => {\n        localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n      });\n\n      if (graph_array.response.s !== \"no_data\") {\n        for (let i = 0; i < graph_array.response.t.length; i++) {\n          converted_array.push(new Date(graph_array.response.t[i] * 1000));\n        }\n        this.setState((prevState) => ({\n          graphData: [...prevState.graphData, {\n            stockValue: graph_array.stockValue,\n            x_axis: converted_array,\n            y_axis: graph_array.response.c,\n          }],\n          activeStockValue: graph_array.stockValue,\n          showGraphData: true,\n        }));\n      } else {\n        this.setState((prevState) => ({\n          graphData: [...prevState.graphData, {\n            stockValue: graph_array.stockValue,\n            response: \"no_data\",\n            showGraphData: true,\n          }],\n        }));\n      }\n    } else {\n      alert(\"Stock Code does not exist within the Database.\");\n      window.location.reload(true);\n    }\n  };\n\n  checkStockCode = (stockValue) => {\n    this.state.graphData.forEach((graphData, index) => {\n      document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n      if (index === this.state.graphData.length - 1) {\n        document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n      }\n    });\n  };\n\n  render() {\n    const { showGraphData, activeStockValue, graphData, tableData } = this.state;\n\n    const graphCardDOM = showGraphData ? (\n      <div>\n        <select className=\"custom-select main__chart-select\" onChange={(e) => this.checkStockCode(e.target.value)}>\n          {graphData.map((graphData, index) => (\n            <option\n              value={graphData.stockValue}\n              key={index}\n              selected={graphData === graphData[graphData.length - 1] ? \"selected\" : \"\"}\n            >\n              {graphData.stockValue}\n            </option>\n          ))}\n        </select>\n        {graphData.map((graphData, index) => (\n          <GraphCard\n            key={index}\n            tableData={tableData}\n            showGraphData={showGraphData}\n            showActiveStockCode={activeStockValue}\n            graphData={graphData}\n            filteredData={this.state.filteredData}\n            showFilterData={this.state.showFilterData}\n          ></GraphCard>\n        ))}\n      </div>\n    ) : (\n      <p className=\"no-graph-data-message\">\n        No current stock found. Please go to the first box and search for a stock.\n      </p>\n    );\n\n    return (\n       <div className=\"container-fluid app-container\">\n        <div className=\"row\">\n          <div className=\"col-lg-2 sidebar\">\n            <ul className=\"nav flex-column\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" href=\"#\">\n                  Dashboard\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Settings\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Accounts\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Orders\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-lg-10 content\">\n            <div className=\"row app-container__row\">\n                \n              <div className=\"col-12 app-container__container\">\n                <div className=\"app-container__left\">\n                <SearchCard sendSearchResult={this.sendSearchResult} sendSearchGraphResult={this.sendSearchGraphResult}></SearchCard>\n                  <FilterCard showFilterDOM={this.state.showFilterDOM} showGraphData={this.state.graphData} showActiveStockCode={this.state.activeStockValue} getFilteredData={this.getFilteredData}></FilterCard>\n                </div>\n                <div className=\"app-container__right\">\n                  <div className=\"card card-container graph\">\n                    <div className=\"card-body\">\n                      {this.state.showGraphData ? (\n                        <div>\n                          <select className=\"custom-select main__chart-select\" onChange={(e) => this.checkStockCode(e.target.value)}>\n                            {optionSelectDOM}\n                          </select>\n                          {graphCardDOM}\n                        </div>\n                      ) : (\n                        <p className=\"no-graph-data-message\">\n                          No current stock found. Please go to the first box and search for a stock.\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row table-data-row\">\n              <div className=\"col-12 table-data-col\">\n                <TableDataCard showTableData={this.state.showTableData} tableData={this.state.tableData} graphData={this.state.graphData}></TableDataCard>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}