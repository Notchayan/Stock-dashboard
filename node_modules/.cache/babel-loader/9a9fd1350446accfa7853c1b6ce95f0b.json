{"ast":null,"code":"var _jsxFileName = \"/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/App.js\";\nimport React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport '../css/styles.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isopen: false,\n      tableData: [],\n      graphData: [],\n      activeStockValue: '',\n      showFilterDOM: false,\n      showFilterData: false,\n      showTableData: false,\n      showGraphData: false,\n      lsArray: [],\n      option: []\n    };\n\n    this.toggle = () => {\n      this.setState({\n        isopen: !this.state.isopen\n      });\n    };\n\n    this.sendSearchResult = data => {\n      if (data !== \"Symbol not supported\") {\n        this.setState({\n          tableData: this.state.tableData.concat(data),\n          showFilterDOM: true,\n          showTableData: true\n        });\n      }\n\n      ;\n    };\n\n    this.getFilteredData = (date, response_data) => {\n      let abc = this.state.graphData;\n      let converted_array = [];\n\n      for (let i = 0; i < abc.length; i++) {\n        let obj = abc[i];\n\n        if (response_data.stockValue.indexOf(obj.stockValue) !== -1) {\n          converted_array = [];\n\n          for (let i = 0; i < response_data.response.t.length; i++) {\n            converted_array.push(new Date(response_data.response.t[i] * 1000));\n          }\n\n          ;\n          abc.splice(i, 1);\n          abc.push({\n            stockValue: response_data.stockValue,\n            x_axis: converted_array,\n            y_axis: response_data.response.c,\n            date_data: {\n              filteredStartDate: new Date(date[0] * 1000),\n              filteredEndDate: new Date(date[1] * 1000)\n            }\n          });\n          this.setState({\n            graphData: abc,\n            activeStockValue: response_data.stockValue,\n            showGraphData: true\n          }, () => {\n            this.setState({\n              showGraphData: true\n            });\n          });\n        }\n\n        ;\n      }\n\n      ;\n    };\n\n    this.sendSearchGraphResult = (codeExist, graph_array) => {\n      if (codeExist != \"no_data\") {\n        let converted_array = [];\n        this.setState({\n          lsArray: this.state.lsArray.concat(graph_array.stockValue)\n        }, () => {\n          localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n        });\n\n        if (graph_array.response.s !== \"no_data\") {\n          for (let i = 0; i < graph_array.response.t.length; i++) {\n            converted_array.push(new Date(graph_array.response.t[i] * 1000));\n          }\n\n          ;\n          this.setState({\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              x_axis: converted_array,\n              y_axis: graph_array.response.c\n            }),\n            activeStockValue: graph_array.stockValue,\n            showGraphData: true\n          }, () => {\n            // this makes the second graph and above show\n            this.setState({\n              showGraphData: true\n            });\n          });\n        } else {\n          this.setState({\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              response: \"no_data\",\n              showGraphData: true\n            })\n          }, () => {\n            this.setState({\n              showGraphData: true\n            });\n          });\n        }\n      } else {\n        alert(\"Stock Code does not exist within the Database.\");\n        window.location.reload(true);\n      }\n\n      ;\n    };\n\n    this.checkStockCode = stockValue => {\n      this.state.graphData.map((graphData, index) => {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n        if (index === this.state.graphData.length - 1) {\n          document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n        }\n      });\n    };\n  }\n\n  // @desc: this componentDidUpdate is showing the latest graph which has \n  //        been searched and hiding the rest\n  componentDidUpdate() {\n    this.state.graphData.map((graphData, index) => {\n      document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n      if (index === this.state.graphData.length - 1) {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n      }\n    });\n  }\n\n  render() {\n    let graphCardDOM = '';\n    let optionSelectDOM = ''; // @condition: check if showGraphData is true\n\n    if (this.state.showGraphData) {\n      // loop through the data and make each graph\n      graphCardDOM = this.state.graphData.map((graphData, index) => {\n        if (graphData.response !== \"no_data\") {\n          return /*#__PURE__*/React.createElement(GraphCard, {\n            key: index,\n            tableData: this.state.tableData,\n            showGraphData: this.state.showGraphData,\n            showActiveStockCode: this.state.activeStockValue,\n            graphData: graphData,\n            filteredData: this.state.filteredData,\n            showFilterData: this.state.showFilterData,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 25\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(\"p\", {\n            key: index,\n            className: \"no-graph-data-message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 25\n            }\n          }, \"No Data Currently Available. Markets are closed during weekends and public holidays. Please filter by previous date.\");\n        }\n\n        ;\n      });\n    }\n\n    ; // @dom: show all the stock value as a option in select\n\n    optionSelectDOM = this.state.graphData.map((graphData, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: graphData.stockValue,\n        key: index,\n        selected: this.state.graphData[this.state.graphData.length - 1] === graphData ? \"selected\" : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }, graphData.stockValue);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n      toggle: toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Sidebar, {\n      isopen: isopen,\n      toggle: toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.showGraphData ? \"container-fluid app-container\" : \"container-fluid app-container height-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row app-container__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 app-container__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container__left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SearchCard, {\n      sendSearchResult: this.sendSearchResult,\n      sendSearchGraphResult: this.sendSearchGraphResult,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FilterCard, {\n      showFilterDOM: this.state.showFilterDOM,\n      showGraphData: this.state.graphData,\n      showActiveStockCode: this.state.activeStockValue,\n      getFilteredData: this.getFilteredData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container__right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card card-container graph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    }, this.state.showGraphData ?\n    /*#__PURE__*/\n    // add the select field\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select main__chart-select\",\n      onChange: e => this.checkStockCode(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 45\n      }\n    }, optionSelectDOM), graphCardDOM) : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"no-graph-data-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 41\n      }\n    }, \"No current stock found. Please go to the first box and search for a stock.\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row table-data-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 table-data-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableDataCard, {\n      showTableData: this.state.showTableData,\n      tableData: this.state.tableData,\n      graphData: this.state.graphData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/App.js"],"names":["React","SearchCard","FilterCard","TableDataCard","GraphCard","Navbar","App","Component","state","isopen","tableData","graphData","activeStockValue","showFilterDOM","showFilterData","showTableData","showGraphData","lsArray","option","toggle","setState","sendSearchResult","data","concat","getFilteredData","date","response_data","abc","converted_array","i","length","obj","stockValue","indexOf","response","t","push","Date","splice","x_axis","y_axis","c","date_data","filteredStartDate","filteredEndDate","sendSearchGraphResult","codeExist","graph_array","localStorage","setItem","JSON","stringify","s","alert","window","location","reload","checkStockCode","map","index","document","querySelector","style","display","componentDidUpdate","render","graphCardDOM","optionSelectDOM","filteredData","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport '../css/styles.css';\n\nclass App extends React.Component{\n    \n    // TODO: load circle bar\n    state = {\n        isopen: false,\n        tableData: [],\n        graphData: [],\n        activeStockValue: '',\n        showFilterDOM: false,\n        showFilterData: false,\n        showTableData: false,\n        showGraphData: false,\n        lsArray: [],\n        option: []\n    };\n    toggle = () => {\n        this.setState({ isopen: !this.state.isopen });\n    };\n\n    // @desc: this componentDidUpdate is showing the latest graph which has \n    //        been searched and hiding the rest\n    componentDidUpdate(){\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n            }\n        }); \n    };\n\n    // @desc: SearchCard.js does an API call and sends the relevant data for\n    //        the TableDataCard.js, through this you need to truesy the showFilterDOM,\n    //        and showTableData to show the user actual representable DOM.\n    // @param: data     => an object which has current, highest, lowest etc. values\n    //         response => {c: 289.07, h: 299, l: 285.85, o: 286.25, pc: 293.8, t: 1588487630}\n    sendSearchResult = (data) => {\n        if(data !== \"Symbol not supported\"){\n            this.setState({ \n                tableData: this.state.tableData.concat(data),\n                showFilterDOM: true,\n                showTableData: true\n            });\n        };\n    };\n\n    // @desc: FilterCard.js does an API call and sends the response_data which is the\n    //        stockValue and the actual response from the API. From this you want to \n    //        remove the old graph which was in the graphData and insert the new data.\n    //        This also adds readable date for the x_axis data.\n    // @params: date => start and end date of the filtered value\n    //          response_data => stockValue must be a string and response is an object\n    //          response      => {stockValue: stockValue, response: graph_response.data}\n    getFilteredData = (date, response_data) => {\n        let abc = this.state.graphData;\n        let converted_array = [];   \n        \n        for(let i = 0; i < abc.length; i++){\n            let obj = abc[i];\n\n            if(response_data.stockValue.indexOf(obj.stockValue) !== -1){\n                converted_array = [];\n                for(let i = 0; i < response_data.response.t.length; i++){\n                    converted_array.push(new Date(response_data.response.t[i] * 1000))\n                };\n                abc.splice(i, 1);\n                abc.push({\n                    stockValue: response_data.stockValue,\n                    x_axis: converted_array,\n                    y_axis: response_data.response.c,\n                    date_data: {\n                        filteredStartDate: new Date(date[0]*1000),\n                        filteredEndDate: new Date(date[1]*1000)\n                    }\n                });\n                this.setState({\n                    graphData: abc,\n                    activeStockValue: response_data.stockValue,\n                    showGraphData: true\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    })\n                });\n            };\n        };\n    };\n\n    // @desc: SearchCard.js does an API call and sends the graph_array which is the\n    //        stockValue and the actual response from the API. This changes the unix\n    //        time stamp to readable js time in the x_axis.\n    // @param: graph_array => stockValue must be a string and an object of response\n    //         response    => { stockValue: AAPL, response: {c: Array(179), h: Array(179) …} }\n    sendSearchGraphResult = (codeExist, graph_array) => {\n        if(codeExist != \"no_data\"){\n            let converted_array = [];\n        \n            this.setState({\n                lsArray: this.state.lsArray.concat(graph_array.stockValue)\n            }, () => {\n                localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n            });\n    \n            if(graph_array.response.s !== \"no_data\"){\n                for(let i = 0; i < graph_array.response.t.length; i++){\n                    converted_array.push(new Date(graph_array.response.t[i] * 1000))\n                };\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue,\n                        x_axis: converted_array,\n                        y_axis: graph_array.response.c,\n                    }),\n                    activeStockValue: graph_array.stockValue,\n                    showGraphData: true\n                }, () => {\n                    // this makes the second graph and above show\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }else{\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue, \n                        response: \"no_data\",\n                        showGraphData: true\n                    })\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }\n        }else{\n            alert(\"Stock Code does not exist within the Database.\");\n            window.location.reload(true);\n        };\n    };\n\n    // @desc: same as componentDidUpdate, hide all and display only that has been selected\n\n    // @param: stockValue => string of the select (e.g. AAPL)\n    checkStockCode = (stockValue) => {\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n            }\n        }); \n    }\n\n    render(){\n        let graphCardDOM = '';\n        let optionSelectDOM = '';\n\n        // @condition: check if showGraphData is true\n        if(this.state.showGraphData){\n            // loop through the data and make each graph\n            graphCardDOM = this.state.graphData.map((graphData, index) => {\n                if(graphData.response !== \"no_data\"){\n                    return (\n                        <GraphCard\n                            key = { index }\n                            tableData = { this.state.tableData }\n                            showGraphData = { this.state.showGraphData }\n                            showActiveStockCode = { this.state.activeStockValue }\n                            graphData = { graphData }\n                            filteredData = { this.state.filteredData }\n                            showFilterData = { this.state.showFilterData }>\n                        </GraphCard>\n                    );\n                }else{\n                    return(\n                        <p key={ index } \n                           className=\"no-graph-data-message\">\n                            No Data Currently Available. Markets are closed during weekends \n                            and public holidays. Please filter by previous date.\n                        </p>\n                    )\n                };\n            });\n        };\n  \n        // @dom: show all the stock value as a option in select\n        optionSelectDOM = this.state.graphData.map((graphData, index) => {\n            return (\n                <option \n                value={ graphData.stockValue } \n                key={ index }\n                selected={ this.state.graphData[this.state.graphData.length - 1] === graphData ? \"selected\" : \"\" }>\n                  { graphData.stockValue }\n                </option>\n            )\n        });\n\n        return (\n            <>\n            <Navbar toggle={toggle} />\n                <Sidebar isopen={isopen} toggle={toggle} />\n                <div className={ this.state.showGraphData ? \"container-fluid app-container\" : \"container-fluid app-container height-100\" }>\n                \n                <div className=\"row app-container__row\">\n                    <div className=\"col-12 app-container__container\">\n                        <div className=\"app-container__left\">\n                            <SearchCard \n                                sendSearchResult = { this.sendSearchResult }\n                                sendSearchGraphResult = { this.sendSearchGraphResult }>\n                            </SearchCard>\n                            <FilterCard\n                                showFilterDOM = { this.state.showFilterDOM }\n                                showGraphData = { this.state.graphData }\n                                showActiveStockCode = { this.state.activeStockValue }\n                                getFilteredData = { this.getFilteredData }>\n                            </FilterCard>\n                        </div>\n                        <div className=\"app-container__right\">\n                            <div className=\"card card-container graph\">\n                                <div className=\"card-body\">\n                                    { \n                                        this.state.showGraphData \n                                        ? \n                                        // add the select field\n                                        <div>\n                                            <select className=\"custom-select main__chart-select\" onChange={ (e) => this.checkStockCode(e.target.value) }>\n                                                { optionSelectDOM }\n                                            </select>\n                                            { graphCardDOM }\n                                        </div>\n                                        : \n                                        <p className=\"no-graph-data-message\">\n                                            No current stock found. Please go to the first box and search for a stock.\n                                        </p> \n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row table-data-row\">\n                    <div className=\"col-12 table-data-col\">\n                        <TableDataCard \n                            showTableData = { this.state.showTableData }\n                            tableData = { this.state.tableData }\n                            graphData = { this.state.graphData }>\n                        </TableDataCard>\n                    </div>\n                </div>\n            </div></>\n            \n        );\n    };\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}