{"ast":null,"code":"var _jsxFileName = \"/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/GraphCard.js\";\nimport React, { Component } from 'react';\nimport Chart from 'chart.js'; // Import 'chart.js/auto' to use the latest Chart.js features\n\nimport '../css/GraphCard.css';\n\nclass GraphCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.convertToDate = str => {\n      const date = new Date(str);\n      const mnth = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${date.getFullYear()}-${mnth}-${day}`;\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.showGraphData) {\n      const {\n        graphData\n      } = this.props;\n      const lowOrHighColor = graphData.y_axis[0] < graphData.y_axis[graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f';\n      const chartOptions = {\n        responsive: true,\n        plugins: {\n          tooltip: {\n            enabled: true,\n            mode: 'point'\n          }\n        },\n        scales: {\n          x: {\n            display: false,\n            grid: {\n              display: true,\n              color: 'rgba(0, 0, 0, 0)'\n            }\n          },\n          y: {\n            display: true,\n            stepSize: 5,\n            grid: {\n              display: false,\n              color: 'rgba(0, 0, 0, 0)'\n            }\n          }\n        },\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      };\n      const ctx = this.chartRef.current.getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: graphData.x_axis,\n          datasets: [{\n            data: graphData.y_axis,\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            borderColor: lowOrHighColor\n          }]\n        },\n        options: chartOptions\n      });\n    }\n  }\n\n  render() {\n    const {\n      graphData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main__chart\",\n      id: `myChart-${graphData.stockValue}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"h5 mb-3 stockValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, graphData.stockValue, graphData.date_data ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"(\", this.convertToDate(graphData.date_data.filteredStartDate), \"\\xA0to\\xA0\", this.convertToDate(graphData.date_data.filteredEndDate), \")\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, \"(Last 72 Hours)\")), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GraphCard;","map":{"version":3,"sources":["/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/GraphCard.js"],"names":["React","Component","Chart","GraphCard","chartRef","createRef","convertToDate","str","date","Date","mnth","String","getMonth","padStart","day","getDate","getFullYear","componentDidUpdate","props","showGraphData","graphData","lowOrHighColor","y_axis","length","chartOptions","responsive","plugins","tooltip","enabled","mode","scales","x","display","grid","color","y","stepSize","elements","point","radius","legend","ctx","current","getContext","type","data","labels","x_axis","datasets","backgroundColor","borderColor","options","render","stockValue","date_data","filteredStartDate","filteredEndDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'chart.js'; // Import 'chart.js/auto' to use the latest Chart.js features\nimport '../css/GraphCard.css';\n\nclass GraphCard extends Component {\n  chartRef = React.createRef();\n  \n  componentDidUpdate() {\n    if (this.props.showGraphData) {\n      const { graphData } = this.props;\n      const lowOrHighColor = graphData.y_axis[0] < graphData.y_axis[graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f';\n\n      const chartOptions = {\n        responsive: true,\n        plugins: {\n          tooltip: {\n            enabled: true,\n            mode: 'point',\n          },\n        },\n        scales: {\n          x: {\n            display: false,\n            grid: {\n              display: true,\n              color: 'rgba(0, 0, 0, 0)',\n            },\n          },\n          y: {\n            display: true,\n            stepSize: 5,\n            grid: {\n              display: false,\n              color: 'rgba(0, 0, 0, 0)',\n            },\n          },\n        },\n        elements: {\n          point: {\n            radius: 0,\n          },\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n      };\n\n      const ctx = this.chartRef.current.getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: graphData.x_axis,\n          datasets: [\n            {\n              data: graphData.y_axis,\n              backgroundColor: 'rgba(0, 0, 0, 0)',\n              borderColor: lowOrHighColor,\n            },\n          ],\n        },\n        options: chartOptions,\n      });\n    }\n  }\n\n  convertToDate = (str) => {\n    const date = new Date(str);\n    const mnth = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${date.getFullYear()}-${mnth}-${day}`;\n  };\n\n  render() {\n    const { graphData } = this.props;\n    return (\n      <div className=\"main__chart\" id={`myChart-${graphData.stockValue}`}>\n        <div>\n          <h2 className=\"h5 mb-3 stockValue\">\n            {graphData.stockValue}\n            {graphData.date_data ? (\n              <div className=\"ml-2 d-inline\">\n                <span>\n                  (\n                  {this.convertToDate(graphData.date_data.filteredStartDate)}&nbsp;to&nbsp;\n                  {this.convertToDate(graphData.date_data.filteredEndDate)}\n                  )\n                </span>\n              </div>\n            ) : (\n              <div className=\"ml-2 d-inline\">(Last 72 Hours)</div>\n            )}\n          </h2>\n          <canvas className=\"myChart\" ref={this.chartRef} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GraphCard;\n"]},"metadata":{},"sourceType":"module"}