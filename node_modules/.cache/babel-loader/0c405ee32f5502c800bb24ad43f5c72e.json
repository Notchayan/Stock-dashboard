{"ast":null,"code":"var _jsxFileName = \"/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/GraphCard.js\";\nimport React, { Component } from 'react';\nimport Chart from 'chart.js/auto';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.chartInstance = null;\n\n    this.handleMouseEnter = () => {\n      // Handle chart hover effects here\n      if (this.chartInstance) {\n        const dataset = this.chartInstance.data.datasets[0]; // Change the border color to a brighter color on hover\n\n        dataset.borderColor = 'rgba(255, 99, 132, 1)'; // Increase the line thickness on hover\n\n        dataset.borderWidth = 3; // Redraw the chart with animation to reflect the changes\n\n        this.chartInstance.update({\n          duration: 200,\n          easing: 'linear'\n        });\n      }\n    };\n\n    this.handleMouseLeave = () => {\n      // Reset chart hover effects here\n      if (this.chartInstance) {\n        const dataset = this.chartInstance.data.datasets[0]; // Reset border color to the original color\n\n        dataset.borderColor = 'rgba(129, 183, 55, 1)'; // Reset line thickness to the original value\n\n        dataset.borderWidth = 2; // Redraw the chart with animation to reflect the changes\n\n        this.chartInstance.update({\n          duration: 200,\n          easing: 'linear'\n        });\n      }\n    };\n\n    this.convertToDate = str => {\n      const date = new Date(str);\n      const mnth = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${date.getFullYear()}-${mnth}-${day}`;\n    };\n  }\n\n  componentDidMount() {\n    this.createChart();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.showGraphData && prevProps.graphData !== this.props.graphData) {\n      this.updateChart();\n    }\n  }\n\n  createChart() {\n    const {\n      graphData\n    } = this.props;\n    const lowOrHighColor = graphData.y_axis[0] < graphData.y_axis[graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f';\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      // Ensure the chart resizes correctly\n      plugins: {\n        tooltip: {\n          enabled: true,\n          mode: 'point'\n        }\n      },\n      scales: {\n        x: {\n          display: false,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)' // Light grid lines\n\n          }\n        },\n        y: {\n          display: true,\n          stepSize: 5,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)' // Light grid lines\n\n          }\n        }\n      },\n      elements: {\n        point: {\n          radius: 0\n        }\n      },\n      plugins: {\n        legend: {\n          display: false\n        }\n      }\n    };\n    const ctx = this.chartRef.current.getContext('2d');\n    this.chartInstance = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: graphData.x_axis,\n        datasets: [{\n          data: graphData.y_axis,\n          backgroundColor: 'rgba(0, 0, 0, 0)',\n          borderColor: lowOrHighColor,\n          borderWidth: 2 // Increase line thickness\n\n        }]\n      },\n      options: chartOptions\n    }); // Add interactivity: Update chart when the cursor enters or leaves the chart area\n\n    this.chartRef.current.addEventListener('mouseenter', this.handleMouseEnter);\n    this.chartRef.current.addEventListener('mouseleave', this.handleMouseLeave);\n  }\n\n  updateChart() {\n    const {\n      graphData\n    } = this.props; // Update chart data and re-render\n\n    this.chartInstance.data.labels = graphData.x_axis;\n    this.chartInstance.data.datasets[0].data = graphData.y_axis;\n    this.chartInstance.update();\n  }\n\n  render() {\n    const {\n      graphData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main__chart\",\n      id: `myChart-${graphData.stockValue}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"h5 mb-3 stockValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, graphData.stockValue, graphData.date_data ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"(\", this.convertToDate(graphData.date_data.filteredStartDate), \"\\xA0to\\xA0\", this.convertToDate(graphData.date_data.filteredEndDate), \")\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, \"(Last 72 Hours)\")), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GraphCard;","map":{"version":3,"sources":["/Users/chayankumawat/Desktop/react-stock-dashboard-master/src/components/GraphCard.js"],"names":["React","Component","Chart","GraphCard","chartRef","createRef","chartInstance","handleMouseEnter","dataset","data","datasets","borderColor","borderWidth","update","duration","easing","handleMouseLeave","convertToDate","str","date","Date","mnth","String","getMonth","padStart","day","getDate","getFullYear","componentDidMount","createChart","componentDidUpdate","prevProps","props","showGraphData","graphData","updateChart","lowOrHighColor","y_axis","length","chartOptions","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","scales","x","display","grid","color","y","stepSize","elements","point","radius","legend","ctx","current","getContext","type","labels","x_axis","backgroundColor","options","addEventListener","render","stockValue","date_data","filteredStartDate","filteredEndDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'chart.js/auto';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends Component {\n  chartRef = React.createRef();\n  chartInstance = null;\n\n  componentDidMount() {\n    this.createChart();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.showGraphData && prevProps.graphData !== this.props.graphData) {\n      this.updateChart();\n    }\n  }\n\n  createChart() {\n    const { graphData } = this.props;\n    const lowOrHighColor = graphData.y_axis[0] < graphData.y_axis[graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f';\n\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false, // Ensure the chart resizes correctly\n      plugins: {\n        tooltip: {\n          enabled: true,\n          mode: 'point',\n        },\n      },\n      scales: {\n        x: {\n          display: false,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)', // Light grid lines\n          },\n        },\n        y: {\n          display: true,\n          stepSize: 5,\n          grid: {\n            display: true,\n            color: 'rgba(0, 0, 0, 0.1)', // Light grid lines\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n      },\n      plugins: {\n        legend: {\n          display: false,\n        },\n      },\n    };\n\n    const ctx = this.chartRef.current.getContext('2d');\n    this.chartInstance = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: graphData.x_axis,\n        datasets: [\n          {\n            data: graphData.y_axis,\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            borderColor: lowOrHighColor,\n            borderWidth: 2, // Increase line thickness\n          },\n        ],\n      },\n      options: chartOptions,\n    });\n\n    // Add interactivity: Update chart when the cursor enters or leaves the chart area\n    this.chartRef.current.addEventListener('mouseenter', this.handleMouseEnter);\n    this.chartRef.current.addEventListener('mouseleave', this.handleMouseLeave);\n  }\n\n  updateChart() {\n    const { graphData } = this.props;\n    // Update chart data and re-render\n    this.chartInstance.data.labels = graphData.x_axis;\n    this.chartInstance.data.datasets[0].data = graphData.y_axis;\n    this.chartInstance.update();\n  }\n\n  handleMouseEnter = () => {\n    // Handle chart hover effects here\n    if (this.chartInstance) {\n      const dataset = this.chartInstance.data.datasets[0];\n      // Change the border color to a brighter color on hover\n      dataset.borderColor = 'rgba(255, 99, 132, 1)';\n      // Increase the line thickness on hover\n      dataset.borderWidth = 3;\n      // Redraw the chart with animation to reflect the changes\n      this.chartInstance.update({ duration: 200, easing: 'linear' });\n    }\n  };\n\n  handleMouseLeave = () => {\n    // Reset chart hover effects here\n    if (this.chartInstance) {\n      const dataset = this.chartInstance.data.datasets[0];\n      // Reset border color to the original color\n      dataset.borderColor = 'rgba(129, 183, 55, 1)';\n      // Reset line thickness to the original value\n      dataset.borderWidth = 2;\n      // Redraw the chart with animation to reflect the changes\n      this.chartInstance.update({ duration: 200, easing: 'linear' });\n    }\n  };\n\n  convertToDate = (str) => {\n    const date = new Date(str);\n    const mnth = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${date.getFullYear()}-${mnth}-${day}`;\n  };\n\n  render() {\n    const { graphData } = this.props;\n    return (\n      <div className=\"main__chart\" id={`myChart-${graphData.stockValue}`}>\n        <div>\n          <h2 className=\"h5 mb-3 stockValue\">\n            {graphData.stockValue}\n            {graphData.date_data ? (\n              <div className=\"ml-2 d-inline\">\n                <span>\n                  (\n                  {this.convertToDate(graphData.date_data.filteredStartDate)}&nbsp;to&nbsp;\n                  {this.convertToDate(graphData.date_data.filteredEndDate)}\n                  )\n                </span>\n              </div>\n            ) : (\n              <div className=\"ml-2 d-inline\">(Last 72 Hours)</div>\n            )}\n          </h2>\n          <canvas className=\"myChart\" ref={this.chartRef} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GraphCard;\n"]},"metadata":{},"sourceType":"module"}